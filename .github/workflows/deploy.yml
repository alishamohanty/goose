name: deploy

on:
  push:
    branches:
      - deploy
env:
  GOOSE_REDIS_HOST: localhost
  GOOSE_REDIS_PORT: 6379
  GOOSE_RABBITMQ_HOST: localhost
  GOOSE_RABBITMQ_PORT: 5672
  GOOSE_RABBITMQ_USERNAME: guest
  GOOSE_RABBITMQ_PASSWORD: guest
jobs:

  build:
    runs-on: ubuntu-20.04
    services:
      redis:
        image: redis:7.0
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      rabbitmq:
        image: heidiks/rabbitmq-delayed-message-exchange:3.9.13-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup up java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Install Clojure
        uses: DeLaGuardo/setup-clojure@12.5
        with:
          cli: 1.11.1.1409

      - name: Execute clojure code
        run: |
          clojure -T:build uber
          ls

      - uses: mdallasanta/ssh-scp-deploy@master
        with:
          local: './'                                                  # Local file path - REQUIRED false - DEFAULT ./
          remote: '~/'                                                 # Remote file path - REQUIRED false - DEFAULT ~/
          host: ${{secrets.SSH_HOST}}                                      # Remote server address - REQUIRED true
          port: 22                                     # Remote server port - REQUIRED false - DEFAULT 22
          user: ${{secrets.SSH_USER}}                                      # Remote server user - REQUIRED true
          key: ${{secrets.SSH_PRIVATE_KEY}}                                        # Remote server private key - REQUIRED at least one of "password" or "key"
          pre_upload: echo "This will be executed before the upload!"  # Command to run via ssh before scp upload - REQUIRED false
          post_upload: echo "This will be executed after the upload!"  # Command to run via ssh after scp upload - REQUIRED false
          ssh_options: -o StrictHostKeyChecking=no                     # A set of ssh_option separated by -o - REQUIRED false - DEFAULT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
          scp_options: -v                                              # Flags to use during scp - REQUIRED false - DEFAULT ''
